#!/usr/bin/env ruby
# -*- coding: UTF-8 -*-

require_relative '../lib/rol'
require 'English'
require 'optparse'

BANNER = 'Usage: rol.rb -u USERNAME -p PASSWORD'

ARGUMENTS = [
  {
    short: '-u',
    long:  '--username USERNAME',
    text:  'Your gmail username',
    key:   :username
  },
  {
    short: '-p',
    long:  '--password PASSWORD',
    text:  'Your gmail password',
    key:   :password
  },
  {
    short: '-r',
    long:  '--recipient RECIPIENT',
    text:  'Who receives emails',
    key:   :recipient
  }
]

REQUIRED_ARGUMENTS  = [:username, :password, :recipient]

def setup_arguments(parser, options)
  ARGUMENTS.each do |option|
    parser.on(option[:short], option[:long], option[:text]) do |value|
      options[option[:key]] = value
    end
  end
end

def setup_option_parser(options)
  OptionParser.new do |parser|
    parser.banner = BANNER

    setup_arguments(parser, options)

    parser.on_tail('-h', '--help', 'Show this message') do
      puts parser
      exit
    end
  end
end

def check_all_required_arguments_present(options)
  missing = REQUIRED_ARGUMENTS.select { |p| options[p].nil? }
  missing = missing.join(', ')

  fail OptionParser::MissingArgument, missing unless missing.empty?
end

def parse_arguments
  options = {}
  parser = setup_option_parser(options)

  begin
    parser.parse!
    check_all_required_arguments_present(options)
  rescue OptionParser::InvalidOption, OptionParser::MissingArgument
    puts "#{$ERROR_INFO}\n#{parser}"
    exit
  end

  [options[:username], options[:password], options[:recipient]]
end

def delivery_options(username, password)
  { address:              'smtp.gmail.com',
    port:                 587,
    domain:               'gmail.com',
    user_name:            username,
    password:             password,
    authentication:       'plain',
    enable_starttls_auto: true }
end

def setup(username, password)
  Mail.defaults do
    delivery_method :smtp, delivery_options(username, password)
  end

  Rol.config do
    storage :temp_file
  end
end

def create_user(username, password, recipient)
  Rol::User.new do
    retriever_method :gmail, user_name: username,
                             password:  password

    recipient recipient
    format :plain_text
  end
end

def main
  username, password, recipient = parse_arguments
  setup(username, password)
  user = create_user(username, password, recipient)

  Mail.for(user, what: :last, count: 10).each do |m|
    message = m.identify
    message.process
  end

  puts "Saved with #{Rol.storage.inspect}"
end

main
