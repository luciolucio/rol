require 'couchrest'
require 'gmail'
require 'rake/clean'
require 'rake/testtask'
require 'yaml'
require_relative 'lib/expense'
require_relative 'lib/store'
require_relative 'lib/mailprocessortrigger'

task :default => [ :test ]

task :config do
	filename = File.expand_path( File.dirname(__FILE__) ) + '/config/config.y'

	if File.exists?( filename )
		config = File.new( filename ).read
	else
		puts( "No config_local.y found. Requesting config data." )

		print( "Enter email username: " )
		email_user = gets

		print( "Enter email password: " )
		email_passwd = gets

		print( "Enter db url (e.g. http://127.0.0.1:5984): " )
		db_url = gets

		print( "Enter db name: " )
		db_name = gets

		config = File.new( "config/config_template.y" ).read
		config = config.gsub( "<email_user>",   email_user   )
		config = config.gsub( "<email_passwd>", email_passwd )
		config = config.gsub( "<db_url>",       db_url       )
		config = config.gsub( "<db_name>",      db_name      )
	end

	final_config = File.new( "config/config.y", "w" )
	final_config.write( config )
end

task :clean do
	CLEAN.add( FileList[ "*~" ] )
end

Rake::TestTask.new( :test ) do | t |
	t.pattern = 'test/*_test.rb'
end

task :installdb do
	# TODO: depends on :config

	filename = File.expand_path( File.dirname(__FILE__) ) + '/config/config.y'
	config = YAML.load( File.new( filename ) )
	couch = CouchRest.new( config[ :db_url ] )

	puts "Creating database..."
	db = couch.database( config[ :db_name ] )
	db.delete! rescue nil
	db = couch.create_db( config[ :db_name ] )
	puts "Done creating database"

	tag_map = {
		"_id" => "Rol Tag Map",
		:type => "map",
		:tag_map => {},
	}

	description_map = {
		"_id" => "Rol Description Map",
		:type => "map",
		:description_map => {},
	}

	puts "Creating initial documents..."

	resp = db.save_doc( tag_map )
	puts "- tag map" if resp[ :ok ] == "true"

	resp = db.save_doc( description_map )
	puts "- description map" if resp[ :ok ] == "true"

	puts "Done creating initial documents"

	puts "Creating views..."
	unprocessed_triggers = {
		:map =>
"function( doc ) {
	if( doc.type == 'MailProcessorTrigger' && doc.status == 'unprocessed' )
		emit( doc.created_at, doc.expense_ids )
}",
	}

	db.save_doc( {
		"_id"   => "_design/mailprocessor",
		:views  => {
			:unprocessed_triggers => unprocessed_triggers,
		}
	} )

	puts "Done creating views"
end

task :installgmail do
	# TODO: depends on :config

	filename = File.expand_path( File.dirname(__FILE__) ) + '/config/config.y'
	config = YAML.load( File.new( filename ) )
	user = config[ :email_user ]
	password = config[ :email_passwd ]

	session = Gmail.new( user, password )
	session.create_label( 'rol-unprocessed' )
	session.create_label( 'rol-processed' )
end

task :samples do
	puts "Creating samples..."

	[
		Expense.new( "VISA", "1315", Date.parse( "20130208" ), "LJ AMERICANAS", 15.8 ),
		Expense.new( "VISA", "1315", Date.parse( "20130208" ), "POLTRONAS X", 15.7 ),
	].tap do | expenses |
		expenses.each do | e |
			Store.save( e )
		end

		Store.save( MailProcessorTrigger.new( expenses.map { | e | e.id } ) )
	end

	puts "Done"
end
